export function Component() {


  return (
    <button>{count}</button>
  )
}



<body>
  {let count = 1}
  <button onClick={() => count+=1}>{count}</button>
</body>

function apply_count(scope, count) {
  if (scope.x !== x) {
    scope.x = x
    apply_
  }
}


// button increment
<div>
  {let count = 1}
  <button on:click={() => count++}>{count}</button>
</div>



// fetch data
// in this example no data would be shipped to client as we can see its not mutated
---
const posts = await fetch('/posts')
---

<ul>
  <for {posts}>
    {post => <li>{post.name}</li>}
  </for>
</ul>


// fetch on click
---
const posts = await fetch('/posts')

let curPage = 0

async function loadMore() {
  curPage++
  posts.push(await fetch(`/posts?page${curPage}`))
}
---

<ul>
  <for {posts}>
    {post => <li>{post.name}</li>}
  </for>
  <button on:click={loadMore}>Load More</button>
</ul>

// client side sorting
---
const posts = await fetch('/posts')

let curPage = 0

async function loadMore(ordering) {
  curPage++
  posts.push(await fetch(`/posts?page${curPage}&ordering=${ordering}`))
}
---

<ul>
  {let ordering = "asc"}
  <input type="radio" id="asc" name="ordering" value="asc" checked>
  <label for="asc">Ascending</label><br>
  <input type="radio" id="desc" name="ordering" value="desc">
  <label for="desc">Descending</label><br>
  <for {posts}>
    {post => <li>{post.name}</li>}
  </for>
  <button on:click={() => loadMore(ordering)}>Load More</button>
</ul>


server: {
  async function posts(ascending) {
    return fetch(`/posts?ascending=${ascending}`)
  }
}

client: {
  const [sort, setSort] = useState(false)

  function toggleSort() {
    setSort(!sort())
  }
}

<div>
  <ul>
    <for each={await posts(sort())}>
      {post => <li>{post.name}</li>}
    </for>
  </ul>
  <button onClick={toggleSort}>Toggle Ordering</button>
</div>